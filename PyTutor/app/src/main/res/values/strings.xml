<resources>
    <!-- activity_main.xml-->
    <string name="app_name">PyTutor</string>
    <string name="subtitle">Learn Python</string>
    <string name="start">Select a Lesson</string>
    <string name="points">Points</string>

    <!-- score.xml -->
    <string name="scoreVal">0</string>
    <string name="score">Score:</string>
    <string name="bronze">Bronze: 50 points</string>
    <string name="silver">Silver: 500 points</string>
    <string name="gold">Gold: 5000 points</string>
    <string name="back">Back to menu</string>

    <!-- lesson_list.xml -->
    <string name="lessonSelect">Lesson Select</string>
    <string name="lesson1">Syntax Pt.1</string>
    <string name="lesson2">Syntax Pt.2</string>
    <string name="lesson3">Strings</string>
    <string name="lesson4">Lists</string>
    <string name="lesson5">Tuples</string>
    <string name="lesson6">Loops</string>
    <string name="lesson7">Classes</string>
    <string name="lesson8">Functions</string>

    <!-- lessons -->
    <string name="skip">Skip to quiz</string>
    <string name="next">Next page</string>
    <string name="backLessons">Back to list</string>
    <string name="startLessons">Start Quiz</string>

    <string name="syntax1">Syntax Pt.1</string>
    <string name="syntax1Page1"> \nVariables are created when they are assigned a value. The variable type does not need to be stated when creating a variable\n\nExample:\n\nx = 1\ny = \"Hello World\"\n\nFor strings, such as the “Hello World” example, you can use double or single quotes. So \"Hello World\" and \'Hello World\' both work to give the same value.\n\nVariable names must start with either a letter or an underscore. NOT a number.\nNames may contain a number AFTER the first character.\nNames are case sensitive. So name, Name, and nAMe are all considered different variable names.\n\nExample:\n\n_x, VariableName, Variable2\n\nYou can assign values to multiple variables at once\n\nx, y, z = 1, 2, 3 will assign 1 to x, 2 to y, and 3 to z\n\nx, y, z = 1 will assign the value 1 to each of the variables, x, y, and z</string>
    <string name="syntax1Page2">Reserved Words:\nSome words in Python are \"reserved\" meaning that they cannot be used to name a variable.\nThese reserved words use only lowercase letters. Examples of reserved words are \'if\', \'break\', \'class\', and \'for\'\nThere are many other reserved words in Python.\n\nPrint:\nThe Print command will output either variables or values. Print is called by typing the word print, followed by parentheses.\n\nExample:\n\nprint(\"Hello World\")\n\nThis example will print the phrase Hello World, with no quotation marks. Alternatively, you can print a number directly such as print(5), which will output the number 5.\n\nFinally, you can use print with a variable to print the value of the variable.\n\nExample:\n\nx = 5 \ny = \"Hello\"\nprint(x)\nprint(y)\n\nThis example will output the value 5 on one line, and the word Hello on the second line.</string>

    <string name="syntax2">Syntax Pt.2</string>
    <string name="syntax2Page1">Indentation matters!. The amount of spaces or tabs is used to denote different blocks of code.\n\nExample:\n\nif 5 > 2:\n\tprint(\'Five is greater than two!\')\nprint(\"Hello World\")\n\nIn this example, the \"Hello World\" will print despite the veracity of the if statement.\nAn individual block of code must have the same number of spaces for each line. A different amount indicates it is part of a different block.\n\nComments are used to make notes about code, without actually being a part of the code, or affecting it in any way. Comments are important, as they allow other people who look at your code to understand the intent of each block.\nComments are created by starting with a #. After the # the rest of the line will be a comment\n\nExample:\n\nx = \"This is not a comment\"\n# This line is a comment\nprint(x)\n\nIn the above example, the middle line is a comment, so the compiler will ignore it and it will not affect the code.</string>
    <string name="syntax2Page2">Multi-Line Statements:\n\nNormally Python statements end with the start of a new line. However, it is possible to make one statement take place over multiple lines. This is done by using the line continuation character, \\, at the end of one line.\n\nExample:\n\nx = 5 + \\\n6 + \\\n7\n\nThe above example will set the value of x so that it is the summation of the values on the three lines. So x will equal 5 + 6 + 7, or 18.</string>

    <string name="strings">Strings</string>
    <string name="stringsPage1">Strings are values wrapped in either single or double quotations, usually used to hold the values of longer sets of characters. \'He\', \"llo Wor\", \"113_\" are three sets of viable strings.\nNote that they can hold letters, numbers, or other characters.\n\nMoreover, single and double quotes can be used, as long as the same type is used on a single string.\n\nStrings can also be assigned to variables.\n\nExample:\n\nx = \"Testing\"\n\nThe above will set the value of x to \"Testing\" without the quotation marks\n\nMultiLine Strings:\nStrings can be entered through the use of multiple lines. This is done by surrounding the string with three sets of quotation marks\n\nExample:\n\n\"\"\"This\nis my\nexample\"\"\"\n\nThese can also be single or double quotation marks, but it must be surrounded by three sets</string>
    <string name="stringsPage2">Strings are treated like arrays, meaning individual characters in the string can be called as a value in an array would be.\n\nExample:\n\na = \"Testing\"\nprint(a[2])\n\nThis example would print the value at the 2 spot, or \"s\"\n\nSlicing and indexing:\nA specific portion of a string can be returned by treating it like an array. However, instead of putting one number inside the brackets of the array, two numbers will be needed, separated by a colon.\n\nExample:\n\nx = \"testing\"\nprint(x[2:5])\n\nThis example will output the values from the two spot up to but not including the five spot, or \"sti\"\nTo index starting from the end of the string, use negative numbers\n\nExample:\n\nx = \"Testing\"\nprint(x[-5:-2])\n\nThis example would print \"esti\"</string>
    <string name="stringsPage3">String Methods:\nYou can get the length of a string using the len() method, with the string inside the parentheses.\n\nExample:\n\nx = \"Testing\"\ny = len(x)\n\nThis would set the value of y to the number of characters in x, which is 7\n\nThe lower() method will change all of the characters to lowercase letters, while the upper() method will change all the characters to uppercase letters. Unlike length, these methods will not use a string as a parameter, but are called in relation to a string.\n\nExample:\n\nx = \"testing\"\nprint(x.upper())\n\nThis example will output \"TESTING\" with all capitals.</string>
    <string name="stringsPage4">The next method is the replace(). This method will take the first parameter, and replace all instances of that parameter in the string with the second parameter. The parameters ARE case sensitive.\n\nExample:\n\nx = \"Testing\"\nx.replace(\"T\", \"R\")\nprint(x)\n\nThis will return \"Resting\". Notice that only the uppercase \"T\" got replaced, due to case sensitivity.\n\nConcatenating strings:\nStrings can be combined, or \"Concatenated\" by using a plus sign in between the two strings you wish to concatenate. However, this will only work with two string types. You can not, for example, combine a string and an integer type.\n\nExamples:\n\nx = \"testing\"\nz = x + \"S\"\n\nThis example will set the value of z to \"testingS\"</string>

    <string name="lists">Lists</string>
    <string name="listsPage1">Lists, along with tuples (See Tuples Lesson), store multiple items within one variable. This makes it easier to hold and manipulate larger clusters of data.\nTo create a list, declare a variable, but instead of a single value, use brackets to enclose multiple items separated by commas.\n\nExample:\n\nmyList = [\"First\", \"Second\", \"Third\"]\nprint(myList)\n\nThis example will output the following: [\'First\', \'Second\', \'Third\']\nAs seen, printing the list allows for multiple data points to be outputted at once, which is much more efficient than printing each individual item.\n\nLists are ordered, meaning each item in the list has a place associated with it, based on where it is in the list. Like other programming languages, the first item in the list will be denoted 0, with the second one being denoted 1, and so on. These individual items can be called by using brackets after the list name.\n\nExample:\n\nmyList = [\"First\", \"Second\", \"Third\"]\nprint(myList[2])\n\nThis will display the value at the two place, the third item in the list \'Third\'.</string>
    <string name="listsPage2">Lists do not have to hold strings, they can hold any data type. Moreover, data types can be mixed within a single list.\nExample:\n\nmyList = [1, 2, 3, 4, 5]\nx = [1.2, \"Hello\", 3, 4, \"VeryNice\"]\n\nBoth of these are valid lists, one holding only integers, with the other holding integers, floating point numbers, and strings.\nLists can also be modified after they are created. The first modification is the append method. This is used to add items to the end of the list. It is called by a list, and features the added value as a parameter.\nExample:\n\nx = [1, 2, 3, 4, 5]\nx.append(6)\n\nThis example will change the list x so it contains [1, 2, 3, 4, 5, 6].\nThe next way to modify lists is with the insert method. This inserts a value into a specific part of a list. Similar to append, it is called by a list, but features two parameters, the location to insert into, and the item to insert.\nExample:\n\nx = [1, 2, 3, 4, 5]\nx.insert(3,\'y\')\n\nThis will change list x to hold [1, 2, 3, \'y\', 4, 5] as y has been placed into the 3 slot in the list, which is the fourth item.</string>
    <string name="listsPage3">There are two ways to remove items from the list. The del command can be used to remove an item at a specific location, while the remove method can remove a specific item from the list.\n\nExample:\n\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ndel x[0]\nx.remove(4)\n\nThis example works in two parts. The del command removes the value at the 0 position, or the first item in the list. Then, the remove method removes instances of 4 in the list. So the final list contains: [2, 3, 5, 6, 7, 8]\n\nTo get the length of a list, simply use the len method. This method takes the list as a parameter, and returns the total number of items in the list.\n\nExample:\n\nmyList = [1, 2, 3, 4, 5, 6, 7, 8, 0]\nprint(len(myList))\n\nThis example will print the total number of items in \'myList\', which is 9 items.</string>

    <string name="tuplesPage1">Tuples are very similar to lists, but with a few key differences. First, tuples are defined using parentheses instead of square brackets. \n\nExample: \n\nmyTuple=(“A”,”tuple”,”uses”,”parentheses”) \n\nThis example creates a tuple with the four values. However, the values inside of a tuple can not be amended or added to. Once the tuple is created, nothing inside it can be modified, and you cannot add or remove values. \nTuples can also contain multiple data types in one tuple. \n\nExample: \n\nmyTuple=(“A”,”1”,”uses”,”3.5”) \n\nThis example creates a tuple with two strings, an integer, and a floating point number. This is a valid tuple. \nLike lists, tuples are indexed, with the first item having a place of 0. Moreover, many of the same functions that work with lists work with tuples. For example, the len function also applies to tuples, returning the value of how many items are stored in the tuple. </string>
    <string name="tuplesPage2">However, none of the append, or remove functions will work, as tuples cannot be modified. However, tuples can be converted to lists, and vice versa. \nExample: \n\x = (\'this\', \'is\', \'tuple\') \ny = list(x) \ny[1] = \'was\' \nx = tuple(y) \n\nThis example creates a tuple, x, then creates a list with the values of the tuple. It then changes a value in the list, and makes a new tuple with the name x, based on the modified list. So the tuple x will now contain (“this”,”was”,”tuple”) \nOne thing that can be done to tuples is to join them. This uses a plus sign between two tuples to create a new tuple \nExample: \nx = (\'this\', \'is\', \'new\') \ny = (\'tuple\',2) \nz = x+y \n\nThis will create a new tuple, z, with the values in x followed by the values in y. \nYou can also multiply the tuple, causing the items to repeat. \nExample: \nx = (\'this\', \'is\', \'new\') \ny= x * 3 \n\nThis example will create tuple y to contain (\'this\',\'is\',\'new\',\'this\',\'is\',\'new\',\'this\',\'is\',\'new\') It is the tuple x repeated three times. </string>

    <string name="loopsPage1">Normally, Python statements are executed one after another. However, loops can be used to change this order, or to run a specific set of statements multiple times. Loops are designed with a condition, and if the condition is true, the body of the loop statement is executed for as long as the condition remains true \nThe first type of loop is the While statement. This is denoted by the word while, followed by the condition, a colon, and has the body being under the condition, indented. \n\nExample: \n\nx=5 \nwhile x &lt; 9: \n   print (x) \n   x=x+1 \n\nThis loop will print the value of x, and then increment that value by one, until the value of x is equal to 9. So the output will be 5 6 7 8. Pay attention to indentation, as that is what determines what is the body of the loop, and what is not. Moreover, the value of the condition variable (x in the example) needs to be adjusted in the loop. If it is not, the loop will run forever. </string>
    <string name="loopsPage2">The else statement tells the computer what to do if the condition for the while loop is false. It does not need a condition of its own. \n\nExample: \n\nx=5 \nwhile x > 9: \n   x=x+1 \nElse \n   print(“x is less than 9”) \n\nThis example will print the “X is less than 9” phrase, as it skips the while loop because the condition is not true. \nThe second type of loop is the for loop. This is used as an iterator, and will cycle through the values in a list or tuple. \n\nExample: \n\ncolors=[“red”,”green”,”yellow”] \nfor x in colors: \n   print(x) \n\nThis example will output the three values stored in colors, cycling through them in order. \nAside from looping through lists, you can also loop through the characters in an individual string. \n\nExample” \n\nfor x in “hello” \n   print(x) \n\nThis will print the individual letters in the word hello.</string>
    <string name="loopsPage3">The If statement: \nThe if statement is not a loop, but behaves similarly. It has a condition, and the body of the statement is only executed if the condition is true. Moreover, it can be combined with the elif and else statements to have multiple conditions and options for those conditions. \n\nExample: \n\nx=5 \ny=6 \nif y&lt;x \n   print(“y is less than x”) \nelif y==x \n   print(“The values are equal”) \nelse \n   print(“x>y”) \n\nThis example checks the condition for the if statement, sees it is not true, checks the condition for the elif statement, sees it is not true, and finally executes the body of the else statement. You can have multiple elif statements as well. You can also check multiple conditions with the and operator </string>
    <string name="loopsPage4">You can check multiple conditions with the and operator \n\nExample: \n\nx=5 \ny=6 \nz=7 \nif x&lt;y and z&gt;x \n   print(”True statement”) \nelse \n   print(”At least one condition was false”) \n\nThis statement checks both conditions in the if statement, and requires them both to be true in order to print the body of the if statement. The or statement works similarly, but will execute the body of the statement if either of the conditions is true. \n\nExample: \n\nx=5 \ny=6 \nz=7 \nif x&lt;y or z&lt;x \n   print(”True statement”) \nelse \nprint(”Both conditions were false”) </string>

    <string name="classesPage1">Python is an object oriented programming language, meaning instructions act upon objects. In previous lessons, these objects were things like integer values, or strings. However, objects can have unique types created by the programmer. This is done by creating classes \n\nClasses can be created with the word class, followed by the name of the class, followed by a colon. Underneath, it should have values and functions/function definitions used within the class. To print an object, use the name of an object of that type followed by a period and the item in the class. \n\nExample: \n\nclass Car: \n   brand=”Hyundai” \n   series=”Sonata” \nx= Car() \nprint(x.brand, x.series) \nThis example will create the class car, which contains the values for a brand and series, both of which are preset. It then creates an object of the car type, called x, and prints the brand and series values for x. \nNotice that when x is created, Car has parentheses next to it.</string>
    <string name="classesPage2"> The __init__ function is used to create an object with specific values attached to the values of the type. Using the previous type as an example, series and brand would have values declared when the car type object is declared, rather when the class is defined. This is done by using the self argument. When self is called, it just means that we are referring to the calling object specifically. \n\nExample: \nclass Car: \n   def __init__ (self ,brand,series) \n      self.brand=brand \n      self.series=series \n   def displayName(self): \n      print(self.brand+self.series). \nx=Car(“Honda”,”Accord”) \nx.displayName(self) \n\nIn this example, when x is created, it sets the brand name to Honda, and the series name to Accord. It does this using the self argument, and changing setting the car type’s value to the passed version of brand and series. After the object x is created, it is used to call the displayName function, which uses self as a parameter. \nEmpty classes will normally return an error. In order to avoid this, use the command pass to pass the class definition \nExample: \nClass newClass: \n   pass \nThis example will create an empty class with no values. It will not return an error due to the use of pass.</string>

    <string name="functionsPage1">Functions are blocks of code that are only run when they are called. They are declared with the keyword def, followed by the name of the function, a set of parentheses, and a colon. \n\nExample: \n\ndef myFunction(): \n   print(“This is my new function”) \n\nThis example creates a function called myFunction, that outputs ”This is my new function” when it is called. Notice the indentation, as indentation is how different blocks of code are differentiated in Python. \nYou can also set a default value for arguments by using an equal sign in the definition. \n\nExample: \n\ndef myFunction(x = ”Hello”): \n   print(x) \nmyFunction() \n\nIn this example, the function does not have an argument when is called, so it uses the default value from the function definition, Hello. \nYou can pass data to the function by placing it within the parentheses. When defining the function, place the name of a variable within the parentheses. The function is later called by the function name, with arguments placed within the parentheses. These arguments can be a string or integer directly, or the name of a variable.  </string>
    <string name="functionsPage2"> Example: \n\ndef myFunction(x,y): \n   print(x,y) \nz=”Hi” \nmyFunction(z,”Hello”) \n\nIn this example, myFunction is defined as needing the arguments x and y, and then printing the values of those variables. When the function is called, it takes the variable, z, as the x argument, and the string ”Hello” as the y argument. So this iteration will print: Hi Hello. Notice that the example asks for two arguments. Passing more or less than two arguments in this instance will return an error, as the amount of arguments needs to be equal to the amount that the function is defined with. \nBy using an asterisk before the argument name in the definition, the argument will become a tuple, meaning it can take an undefined number of arguments when it is called. \n\nExample: \n\ndef myFunction(*x): \n   print(x[2]) \nmyFunction(”Hello”,”This”,”Is”,”The”,”Example”) \nmyFunction(1,2,5,8,11) \n\nThis example uses a tuple as the argument, so the first time the function is called, it will print the word Is. The second time, it will print the number 5.</string>
</resources>